from typing import List, Tuple
import math
from data_ingestion import Waypoint, Mission
from temporal_check import interpolate_path

def is_conflict(wp1: Waypoint, wp2: Waypoint, spatial_thresh=5.0, time_thresh=1.0) -> bool:
    if abs(wp1.t - wp2.t) > time_thresh:
        return False
    dist = math.sqrt((wp1.x - wp2.x)**2 + (wp1.y - wp2.y)**2 + (wp1.z - wp2.z)**2)
    return dist < spatial_thresh

def check_conflicts(primary: Mission, others: List[Mission]) -> Tuple[bool, List[Tuple[Waypoint, Waypoint]]]:
    conflicts = []
    primary_path = interpolate_path(primary)
    other_paths = [interpolate_path(m) for m in others]

    for other in other_paths:
        for wp1 in primary_path:
            for wp2 in other:
                if is_conflict(wp1, wp2):
                    conflicts.append((wp1, wp2))
    return (len(conflicts) == 0), conflicts
